services:
  # Сервис для PostgreSQL
  pg-local:
    container_name: postgres
    build:
      context: ./backend 
      dockerfile: postgres.Dockerfile
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DB}
    ports:
      - "${DB_PORT}:${DB_PORT_INTERNAL}" 
    volumes:
      - postgres_volume_local:/var/lib/postgresql/data
    networks:
      - my_network

  # Сервис для миграций
  migrator-local:
    container_name: migrator
    build:
      context: ./backend 
      dockerfile: migration.Dockerfile
    restart: on-failure
    environment:
      DB_HOST: pg-local
    networks:
      - my_network

  # Сервис для приложения
  backend:
    container_name: backend
    build:
      context: ./backend 
      dockerfile: Dockerfile
    ports:
      - "${HTTP_PORT}:${HTTP_PORT}"  
    depends_on:
      - pg-local
    networks:
      - my_network

  # Сервис для pinger
  pinger:
    container_name: pinger
    network_mode: host
    build:
      context: ./pinger
      dockerfile: Dockerfile
    ports:
      - "50050:50050"  
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - backend

  # Сервис для frontend
  frontend:
    container_name: frontend
    build:
      context: ./frontend  
      dockerfile: Dockerfile 
    expose:
      - "3000"
    depends_on:
      - backend
    networks:
      - my_network
    restart: always

  # Сервис для nginx
  nginx:
    container_name: nginx
    image: nginx:stable-alpine
    ports:
      - "90:80"
    volumes:
      - './nginx/nginx.conf:/etc/nginx/nginx.conf'
      - '/etc/letsencrypt:/etc/letsencrypt'
    depends_on:
      - backend
      - frontend
    networks:
      - my_network

networks:
  my_network:
    driver: bridge

volumes:
  postgres_volume_local:
