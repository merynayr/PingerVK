services:
  # Сервис для PostgreSQL
  pg-local:
    container_name: postgres
    build:
      context: ./backend 
      dockerfile: postgres.Dockerfile
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DB}
    ports:
      - "${DB_PORT}:${DB_PORT_INTERNAL}" 
    volumes:
      - postgres_volume_local:/var/lib/postgresql/data
    networks:
      - my_network
    restart: always

  # Сервис для миграций
  migrator-local:
    container_name: migrator
    build:
      context: ./backend 
      dockerfile: migration.Dockerfile
    restart: on-failure
    environment:
      DB_HOST: pg-local
    networks:
      - my_network

  # Сервис для приложения
  backend:
    container_name: backend
    build:
      context: ./backend 
      dockerfile: Dockerfile
    depends_on:
      - pg-local
      - zookeeper
      - kafka1
      - kafka2
    networks:
      - my_network
    restart: always

  # Сервис для pinger
  pinger:
    container_name: pinger
    network_mode: host
    build:
      context: ./pinger
      dockerfile: Dockerfile
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - kafka1
      - kafka2
      - zookeeper
    restart: always

  # Сервис для frontend
  frontend:
    container_name: frontend
    build:
      context: ./frontend  
      dockerfile: Dockerfile 
    expose:
      - "3000"
    depends_on:
      - backend
      - nginx
    networks:
      - my_network
    restart: always

  # Сервис для nginx
  nginx:
    container_name: nginx
    image: nginx:stable-alpine
    ports:
      - "90:80"
    volumes:
      - './nginx/nginx.conf:/etc/nginx/nginx.conf'
      - '/etc/letsencrypt:/etc/letsencrypt'
    depends_on:
      - backend
    networks:
      - my_network
    restart: always
    command: /bin/sh -c "sleep 15 && nginx -g 'daemon off;'"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181" 
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - my_network
    restart: always
      
  # Брокер №1   
  kafka1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka1
    container_name: kafka1
    depends_on:
      - zookeeper 
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0 
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_LOG_RETENTION_MS: 60000
      KAFKA_LOG_RETENTION_BYTES: 512000
      KAFKA_LOG_CLEANUP_POLICY: delete
    networks:
      - my_network
    restart: always

  # Брокер №2
  kafka2:
    image: confluentinc/cp-kafka:latest
    hostname: kafka2
    container_name: kafka2
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29093,PLAINTEXT_HOST://localhost:9093 
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0 
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_LOG_RETENTION_MS: 60000
      KAFKA_LOG_RETENTION_BYTES: 512000
      KAFKA_LOG_CLEANUP_POLICY: delete
    networks:
      - my_network
    restart: always


  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - 8090:8080
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1:29092,kafka2:29093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    links:
      - kafka1
      - kafka2
      - zookeeper
    networks:
      - my_network



networks:
  my_network:
    driver: bridge

volumes:
  postgres_volume_local:
